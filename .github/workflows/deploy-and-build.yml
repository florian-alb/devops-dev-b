name: Build & Deploy
on:
  push:
    branches:
      - dev

jobs:
  backend-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.create_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate version
        id: create_version
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          NEXT_VERSION=$(echo $LATEST_TAG | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Create Tag
        run: |
          git tag ${{ steps.create_version.outputs.version }}
          git push origin ${{ steps.create_version.outputs.version }}

  build-backend:
    name: Build backend
    runs-on: ubuntu-latest
    needs: backend-version
    steps:
      - uses: actions/checkout@v4
      - name: Login to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          username: nologin
          password: ${{ secrets.SCW_SECRET_KEY }}
          registry: ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}

      - name: Build the Docker image
        working-directory: back
        run: |
          docker build . -t ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/backend-image:${{ needs.version.outputs.version }} \
                        -t ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/backend-image:latest

      - name: Push the Docker Image
        working-directory: back
        run: |
          docker push ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/backend-image:${{ needs.version.outputs.version }}
          docker push ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/backend-image:latest

  deploy-backend:
    needs: build-backend
    runs-on: ubuntu-latest
    name: Deploy Bacnkend on Scaleway
    outputs:
      backend_url: ${{ steps.deploy-container.outputs.container_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use CLI
        uses: scaleway/action-scw@v0
        with:
          save-config: true
          export-config: true
          version: v2.24.0
          access-key: ${{ secrets.SCW_ACCESS_KEY }}
          secret-key: ${{ secrets.SCW_SECRET_KEY }}
          default-project-id: ${{ secrets.SCW_DEFAULT_PROJECT_ID }}
          default-organization-id: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}

      - name: Delete container if extists
        run: |
          CONTAINER_ID=$(scw container container list | grep container-backend | awk '{print $1}') || true
          if [ ! -z "$CONTAINER_ID" ]; then
            scw container container delete $CONTAINER_ID
          fi

      - name: Deploy container
        id: deploy-container
        run: |
          RESULT=$(scw container container create name=container-backend \
          namespace-id=fff60a01-13f1-4d75-99dd-ba21a100f036 \
          registry-image=${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/backend-image:latest \
          min-scale=0 \
          max-scale=1 \
          memory-limit=128 \
          cpu-limit=100 \
          port=3000 \
          environment-variables.JWT_SECRET=${{ secrets.JWT_SECRET }} \
          environment-variables.DATABASE_URL=${{ secrets.DATABASE_URL }} -o json)

          echo "Container response: $RESULT"
          BACKEND_URL=$(echo "$RESULT" | jq -r '.domain_name')

          echo "BACKEND_URL=https://${BACKEND_URL}" >> $GITHUB_OUTPUT

  frontend-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.create_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate version
        id: create_version
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          NEXT_VERSION=$(echo $LATEST_TAG | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Create Tag
        run: |
          git tag ${{ steps.create_version.outputs.version }}
          git push origin ${{ steps.create_version.outputs.version }}

  build-frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    needs: frontend-version
    steps:
      - uses: actions/checkout@v4

      - name: Login to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          username: nologin
          password: ${{ secrets.SCW_SECRET_KEY }}
          registry: ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}

      - name: Build the Docker image
        working-directory: front
        run: |
          docker build \
          --build-arg VITE_API_URL="${{ needs.deploy-backend.outputs.backend_url }}" \
          -t ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/frontend-image:${{ needs.frontend-version.outputs.version }} \
          -t ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/frontend-image:latest .

      - name: Tage and Push the Docker Image
        working-directory: front
        run: |
          docker push ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/frontend-image:${{ needs.frontend-version.outputs.version }}
          docker push ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/frontend-image:latest

  deploy-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    name: Deploy Frontend on Scaleway

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use CLI
        uses: scaleway/action-scw@v0
        with:
          save-config: true
          export-config: true
          version: v2.24.0
          access-key: ${{ secrets.SCW_ACCESS_KEY }}
          secret-key: ${{ secrets.SCW_SECRET_KEY }}
          default-project-id: ${{ secrets.SCW_DEFAULT_PROJECT_ID }}
          default-organization-id: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}

      - name: Delete container if extists
        run: |
          CONTAINER_ID=$(scw container container list | grep container-frontend | awk '{print $1}') || true
          if [ ! -z "$CONTAINER_ID" ]; then
            scw container container delete $CONTAINER_ID
          fi

      - name: Deploy container
        id: deploy-container
        run: |
          scw container container create name=container-frontend \
          namespace-id=fff60a01-13f1-4d75-99dd-ba21a100f036 \
          registry-image=${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/frontend-image:latest \
          min-scale=0 \
          max-scale=1 \
          memory-limit=128 \
          cpu-limit=100 \
          port=80
